01. Fill the Matrix
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        String[] commands = scanner.nextLine().split(", ");
        Integer n = Integer.parseInt(commands[0]);
        String command = commands[1];
        int[][] matrix = new int[n][n];
        Integer count = 1;

        if(command.equals("A")){
            patternA(matrix, count);
        }
        else {
            patternB(n, matrix, count);
        }

        printMatrix(matrix);
    }

    private static void printMatrix(int[][] matrix) {
        for (int[] ints : matrix) {
            for (int anInt : ints) {
                System.out.printf("%d ",anInt);
            }
            System.out.println();
        }
    }

    private static void patternB(Integer n, int[][] matrix, Integer count) {
        for (int col = 0; col < matrix[0].length; col++) {
            if(col % 2 == 0){
                for (int row = 0; row < matrix.length; row++) {
                    matrix[row][col] = count;
                    count++;
                }
            }
            else {
                for(int row = n - 1; row >= 0; row--){
                    matrix[row][col] = count;
                    count++;
                }
            }
        }
    }

    private static void patternA(int[][] matrix, Integer count) {
        for (int col = 0; col < matrix[0].length; col++) {
            for (int row = 0; row < matrix.length; row++) {
                matrix[row][col] = count;
                count++;
            }
        }
    }
}



02. Matrix of Palindromes
import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        Integer rows = scanner.nextInt();
        Integer cols = scanner.nextInt();

        String[][] matrix = new String[rows][cols];
        char[] start = new char[]{'a', 'a', 'a'};

        fillMatrix(matrix, start);

        for (String[] strings : matrix) {
            System.out.println(String.join(" ",strings));
        }
    }

    private static void fillMatrix(String[][] matrix, char[] start) {
        for (int row = 0; row < matrix.length; row++) {
            int cout = 0;
            for (int col = 0; col < matrix[row].length; col++) {
                start[0] = (char) ('a' + row);
                start[1] = (char) ('a' + row + cout);
                start[2] = (char) ('a' + row);
                String result = String.join("",start[0] + "" + start[1] + "" + start[2]);
                matrix[row][col] = result;
                cout++;
            }
        }
    }
}

 3.	Diagonal Difference
 import java.util.Arrays;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        Integer n = Integer.parseInt(scanner.nextLine());
        int[][] matrix = new int[n][n];

        fillMatrix(scanner, matrix);

        int sumPrimary = 0;
        int sumSecondary = 0;
        int result = sumPriSec(matrix, sumPrimary, sumSecondary);
        System.out.println(result);
    }

    private static int sumPriSec(int[][] matrix, int sumPrimary, int sumSecondary) {
        for (int i = 0; i < matrix.length; i++) {
            sumPrimary += matrix[i][i];
            sumSecondary += matrix[i][matrix[i].length - 1 - i];
        }
        int result = Math.abs(sumPrimary - sumSecondary);
        return result;
    }

    private static void fillMatrix(Scanner scanner, int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            int[] cells = Arrays.stream(scanner.nextLine().split(" "))
                    .mapToInt(Integer::parseInt)
                    .toArray();
            for (int j = 0; j < cells.length; j++) {
                matrix[i][j] = cells[j];
            }
        }
    }

}

4.	Maximal Sumimport 

java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int[] rowCols = Arrays.stream(scanner.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt)
                .toArray();
        Integer rows = rowCols[0];
        Integer cols = rowCols[1];
        int[][] matrix = new int[rows][cols];

        for (int i = 0; i < matrix.length; i++) {
            int[] cells = Arrays.stream(scanner.nextLine().split("\\s+"))
                    .mapToInt(Integer::parseInt)
                    .toArray();
            for (int j = 0; j < matrix[i].length; j++) {
                matrix[i][j] = cells[j];
            }
        }

        int bestSum = Integer.MIN_VALUE;
        int[] firstRow = new int[3];
        int[] secondRow = new int[3];
        int[] thirdRow = new int[3];
        for (int i = 0; i < matrix.length - 2; i++) {
            int tempSum = 0;
            for (int j = 0; j < matrix[i].length - 2; j++) {
                tempSum = (matrix[i][j] + matrix[i][j + 1] + matrix[i][j+2]) + (matrix[i + 1][j] + matrix[i + 1][j + 1] + matrix[i + 1][j+2]) +
                        (matrix[i + 2][j] + matrix[i + 2][j + 1] + matrix[i + 2][j + 2]);
                if(tempSum > bestSum){
                    bestSum = tempSum;
                    firstRow[0] = matrix[i][j];
                    firstRow[1] = matrix[i][j + 1];
                    firstRow[2] = matrix[i][j + 2];

                    secondRow[0] = matrix[i+1][j];
                    secondRow[1] = matrix[i+1][j+1];
                    secondRow[2] = matrix[i+1][j+2];

                    thirdRow[0] = matrix[i+2][j];
                    thirdRow[1] = matrix[i+2][j+1];
                    thirdRow[2] = matrix[i+2][j+2];
                }
            }
        }

        String first = Arrays.toString(firstRow);
        String second = Arrays.toString(secondRow);
        String third = Arrays.toString(thirdRow);

        System.out.println("Sum = "+ bestSum);
        System.out.println(first.replaceAll("\\[?,?]?",""));
        System.out.println(second.replaceAll("\\[?,?]?",""));
        System.out.println(third.replaceAll("\\[?,?]?",""));
    }
}

5.	Matrix shuffling

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int[] rowsCols = Arrays.stream(scanner.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt)
                .toArray();

        Integer rows = rowsCols[0];
        Integer cols = rowsCols[1];
        String[][] matrix = new String[rows][cols];

        fillMatrix(scanner, matrix);

       while (true){
           String swap = "";
           try{
               String[] commands = scanner.nextLine().split("\\s+");
               if(commands[0].equals("swap")){
                   int firstRow = Integer.parseInt(commands[1]);
                   int firstCol = Integer.parseInt(commands[2]);
                   int secondRow = Integer.parseInt(commands[3]);
                   int secondCol = Integer.parseInt(commands[4]);

                   swap = matrix[firstRow][firstCol];
                   matrix[firstRow][firstCol] = matrix[secondRow][secondCol];
                   matrix[secondRow][secondCol] = swap;

                   printMatrix(matrix);
               }
               else if(commands[0].equals("END")){
                   break;
               }
               else {
                   System.out.println("Invalid input!");
               }

           }catch (Exception e){
               System.out.println("Invalid input!");
           }

       }
    }

    private static void fillMatrix(Scanner scanner, String[][] matrix) {
        for (int row = 0; row < matrix.length; row++) {
            String[] cells = scanner.nextLine().split("\\s+");
            for (int col = 0; col < matrix[row].length; col++) {
                matrix[row][col] = cells[col];
            }
        }
    }

    private static void printMatrix (String[][] matrix){
        for (String[] strings : matrix) {
            for (String str : strings) {
                System.out.printf("%s ",str);
            }
            System.out.println();
        }
    }
}

 7.	Reverse Numbers with a Stack

 import java.lang.reflect.Array;
import java.util.*;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        ArrayDeque<Integer> stack = new ArrayDeque<>();
        int[] input = Arrays.stream(scanner.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt)
                .toArray();
        for (int i : input) {
            stack.push(i);
        }
        for (Integer integer : stack) {
            System.out.printf("%d ",stack.pop());
        }
    }
}


 8.	Basic Stack Operations
 
 import java.lang.reflect.Array;
import java.util.*;

public class Main {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        ArrayDeque<Integer> stack = new ArrayDeque<>();
        int[] input = Arrays.stream(scanner.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt)
                .toArray();

        int[] array = Arrays.stream(scanner.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt)
                .toArray();

        int removeNum = input[1];
        int presentedNum = input[2];

        for (int i : array) {
            stack.push(i);
        }

        for (int i = 0; i < removeNum; i++) { ;
            stack.pop();
        }

        if(stack.contains(presentedNum)){
            System.out.println("true");
        }
        else {
            int bestMin = Integer.MAX_VALUE;
            for (int i = 0; i < stack.size(); i++) {
              int tempMin = stack.pop();
              if(tempMin < bestMin){
                  bestMin = tempMin;
              }
            }
            if(bestMin == Integer.MAX_VALUE){
                bestMin = 0;
            }
            System.out.println(bestMin);
        }
    }
}

9.	Maximum Element 

import java.lang.reflect.Array;
import java.util.*;

public class Main {

    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int n = Integer.parseInt(scanner.nextLine());
        ArrayDeque<Long> stack = new ArrayDeque<>();
        ArrayDeque<Long> biggerStack = new ArrayDeque<>();
        biggerStack.push(Long.MIN_VALUE);

        for (int i = 0; i < n; i++) {
            long[] commands = Arrays.stream(scanner.nextLine().split("\\s+"))
                    .mapToLong(Integer::parseInt)
                    .toArray();

            if(commands[0] == 1){
                stack.push(commands[1]);
                if(commands[1] > biggerStack.peek()){
                    biggerStack.push(commands[1]);
                }
            }
            else  if (commands[0] == 2){
                long remove = stack.pop();
                biggerStack.remove(remove);
            }
            else {
                System.out.println(biggerStack.peek());
            }

        }
    }
}

10.	Basic Queue Operations 

import java.util.*;

public class BasicQueue {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);

        int[] commands = Arrays.stream(scanner.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt)
                .toArray();

        int[] collection = Arrays.stream(scanner.nextLine().split("\\s+"))
                .mapToInt(Integer::parseInt)
                .toArray();

        int enqueue = commands[0];
        int dequeue = commands[1];
        int num = commands[2];

        Deque<Integer> queue = new ArrayDeque<>();
        for (int i = 0; i < enqueue; i++) {
            queue.offer(collection[i]);
        }
        for (int i = 0; i < dequeue; i++) {
            queue.poll();
        }

        if(queue.contains(num)){
            System.out.println(true);
        }
        else {
            int smallest = Integer.MAX_VALUE;
            for (Integer integer : queue) {
                if(integer < smallest){
                    smallest = integer;
                }
            }
            if(smallest == Integer.MAX_VALUE){
                System.out.println("0");
            }
            else {
                System.out.println(smallest);
            }
        }
    }
}


 12.	Balanced Parentheses
 
 import java.util.*;

public class BalancedParentheses {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        char[] input = scanner.nextLine().toCharArray();
        ArrayDeque<Character> stack = new ArrayDeque<>();
        boolean isEqual = true;

        for (int i = 0; i < input.length; i++) {

            switch (input[i]){
                case '(':
                    stack.push(input[i]);
                    break;
                case '{':
                    stack.push(input[i]);
                    break;
                case '[':
                    stack.push(input[i]);
                    break;
                case ')':

                    if(stack.isEmpty() || stack.pop() != '('){
                        isEqual = false;
                        break;
                    }
                    break;
                case ']':
                    if(stack.isEmpty() || stack.pop() != '['){
                        isEqual = false;
                        break;
                    }
                    break;
                case '}':
                    if(stack.isEmpty() || stack.pop() != '{'){
                        isEqual = false;
                        break;
                    }
                    break;
            }
        }

        System.out.println(isEqual ? "YES" : "NO");
    }
}


